@model Foundation.Features.Checkout.Payments.SwedbankPayCheckoutPaymentOption
@{
	var containerId = Guid.NewGuid();
}

@Html.HiddenFor(x => x.SystemKeyword)

<h3>SwedbankPay</h3>

<div id="swedbankpay-checkout">
	@if (Model.CheckoutConfiguration.UseAnonymousCheckout || Model.UseCheckoutSource)
	{
		<div id="paymentMenuFrame">
			<div id="swedbankpay-paymentmenu-@containerId">

			</div>
		</div>
	}
	else
	{
		<div>
			<div id="swedbankpay-consumer-@containerId">

			</div>
		</div>

		<div id="paymentMenuFrame" hidden>
			<div id="swedbankpay-paymentmenu-@containerId">

			</div>
		</div>
	}
</div>

<script type="text/javascript">
    var loadScriptAsync = function (uri) {
        return new Promise(function (resolve, reject) {
            var tag = document.createElement('script');
            tag.src = uri;
            tag.async = true;
            tag.onload = function () {
                resolve();
            };
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        });
    }
    var scriptLoaded = loadScriptAsync('@(Model.JavascriptSource)');

    var serializeToArray = function (form) {
	    // Setup our serialized data
	    var serialized = [];

	    // Loop through each field in the form
	    for (var i = 0; i < form.elements.length; i++) {

		    var field = form.elements[i];

		    // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields
		    if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;

		    // If a multi-select, get all selections
		    if (field.type === 'select-multiple') {
			    for (var n = 0; n < field.options.length; n++) {
				    if (!field.options[n].selected) continue;
				    serialized.push(encodeURIComponent(field.name) + "=" + encodeURIComponent(field.options[n].value));
			    }
		    }

		    // Convert field data to a query string
		    else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {
			    serialized.push(encodeURIComponent(field.name) + "=" + encodeURIComponent(field.value));
		    }
	    }

	    return serialized;
    };

    var onCreatedPaymentHandler = function(paymentCreatedEvent) {
        console.log(paymentCreatedEvent);
        var form = document.querySelector('#jsCheckoutForm');

        var dataArray = serializeToArray(form);
        dataArray.push('paymentId=' + paymentCreatedEvent.id);
        var data = dataArray.join('&');

        var xhr = new XMLHttpRequest();
        xhr.open("POST", form.getAttribute('data-addpaymentinfourl'), false);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.onload = function () {
            if (xhr.status === 200) {
	            console.log('payment created');
	        }
	        else if (xhr.status !== 200) {
		        alert('Request failed.  Returned status of ' + xhr.status);
	        }
        };

        xhr.send(data);

        console.log('address saved');
    }

    var style = {
	    body: {
		    //backgroundColor: "#555",
		    //color: "#bbb"
	    },
	    button: {
		    backgroundColor: "#337ab7",
		    color: "#fff"
	    },
	    secondaryButton: {
		    backgroundColor: "#555",
		    border: "solid 1px #bbb"
	    },
	    formGroup: {
		    color: "#bbb",
		    backgroundColor: "#555"
	    },
	    label: {
		    color: "#bbb"
	    }
    };

    var config1 = {
	    container: 'swedbankpay-paymentmenu-@containerId',
	    culture: '@Culture',
	    style: style,
	    onPaymentCreated: onCreatedPaymentHandler
    };
</script>


@if (Model.CheckoutConfiguration.UseAnonymousCheckout || Model.UseCheckoutSource)
{
	<script type="text/javascript">
		scriptLoaded.then(function () {
			payex.hostedView.paymentMenu(config1).open();
		});
	</script>
}
else
{
	<script type="text/javascript">

        var paymentMenuConfig = {
            container: "swedbankpay-consumer-@containerId",
            culture: '@Culture',
            style: style,
            onConsumerIdentified: onIdentifiedConsumerHandler,
			onShippingDetailsAvailable: onShippingDetailsAvailableHandler,
			onBillingDetailsAvailable: OnBillingDetailsAvailableHandler
        };

        function OnBillingDetailsAvailableHandler(data) {
	        console.log(data);
	        var request = new XMLHttpRequest();

	        request.addEventListener('load', function() {
		        var response = JSON.parse(this.responseText);
		        console.log(response);
		        var billingAddress = response.billingAddress;
		        document.querySelector('#Shipments_0__Address_Email').value = response.email;
		        document.querySelector('#Shipments_0__Address_FirstName').value = billingAddress.addressee;
		        document.querySelector('#Shipments_0__Address_LastName').value = billingAddress.addressee;
		        document.querySelector('#Shipments_0__Address_Line1').value = billingAddress.streetAddress;
		        document.querySelector('#Shipments_0__Address_PostalCode').value = billingAddress.zipCode;
		        document.querySelector('#Shipments_0__Address_City').value = billingAddress.city;
	        });
	        request.open('POST', '@Url.Action("GetSwedbankPayBillingDetails", "Checkout", null)', true);
	        request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
	        request.send(JSON.stringify(data));
        }

        function onShippingDetailsAvailableHandler(data) {
            console.log(data);
            var request = new XMLHttpRequest();

            request.addEventListener('load', function() {
                var response = JSON.parse(this.responseText);
                console.log(response);
                var shippingAddress = response.shippingAddress;
                document.querySelector('#Shipments_0__Address_Email').value = response.email;
                document.querySelector('#Shipments_0__Address_FirstName').value = shippingAddress.addressee;
                document.querySelector('#Shipments_0__Address_LastName').value = shippingAddress.addressee;
                document.querySelector('#Shipments_0__Address_Line1').value = shippingAddress.streetAddress;
                document.querySelector('#Shipments_0__Address_PostalCode').value = shippingAddress.zipCode;
                document.querySelector('#Shipments_0__Address_City').value = shippingAddress.city;
            });
            request.open('POST', '@Url.Action("GetSwedbankPayShippingDetails", "Checkout", null)', true);
            request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
            request.send(JSON.stringify(data));
        }

        function onIdentifiedConsumerHandler(data) {
            var paymentMenuFrame = document.getElementById("paymentMenuFrame");
            paymentMenuFrame.removeAttribute("hidden");

            var request = new XMLHttpRequest();
            request.addEventListener('load', function () {
				var script = document.createElement('script');
                // This assumses the operations from the response of the POST of the
                // payment order is returned verbatim from the server to the Ajax:
                script.setAttribute('src', this.responseText);
                script.onload = function() {
                    // When the 'view-paymentorder' script is loaded, we can initialize the payment
                    // menu inside our 'checkin' container.
                    payex.hostedView.paymentMenu(config1).open();
                };
				var head = document.getElementsByTagName('head')[0];
				head.appendChild(script);
            });
            request.open('POST', '@Url.Action("GetViewPaymentOrderHref", "Checkout", null)', true);
            request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
            request.send(JSON.stringify(data));
        }


        scriptLoaded.then(function () {
	        payex.hostedView.consumer(paymentMenuConfig).open();
        });

	</script>
}